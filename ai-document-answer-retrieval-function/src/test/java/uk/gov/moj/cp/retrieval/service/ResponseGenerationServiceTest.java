package uk.gov.moj.cp.retrieval.service;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.anyString;
import static org.mockito.Mockito.eq;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import uk.gov.moj.cp.ai.model.ChunkedEntry;
import uk.gov.moj.cp.ai.service.ChatService;

import java.util.List;
import java.util.Optional;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

class ResponseGenerationServiceTest {

    @Mock
    private ChatService mockChatService;

    private ResponseGenerationService responseGenerationService;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        responseGenerationService = new ResponseGenerationService(mockChatService);
    }

    @Test
    void generateResponse_ReturnsTrimmedResponse_WhenChatServiceReturnsValidResponse() {
        String userQuery = "What is the legal implication?";
        String userQueryPrompt = "Provide detailed legal advice.";
        List<ChunkedEntry> chunkedEntries = List.of(
                new ChunkedEntry("id1", "Chunk 1", "file name 1", 1, "doc id"),
                new ChunkedEntry("id2", "Chunk 2", "file name 2", 2, "doc id")
        );
        String mockResponse = "  Valid AI Response  ";

        when(mockChatService.callModel(anyString(), eq(userQuery), eq(String.class)))
                .thenReturn(Optional.of(mockResponse));

        String result = responseGenerationService.generateResponse(userQuery, chunkedEntries, userQueryPrompt);

        assertEquals("Valid AI Response", result);
        verify(mockChatService).callModel(anyString(), eq(userQuery), eq(String.class));
    }

    @Test
    void generateResponse_ReturnsNoResponseMessage_WhenChatServiceReturnsEmpty() {
        String userQuery = "What is the legal implication?";
        String userQueryPrompt = "Provide detailed legal advice.";
        List<ChunkedEntry> chunkedEntries = List.of(
                new ChunkedEntry("id1", "Chunk 1", "file name 1", 1, "doc id")
        );

        when(mockChatService.callModel(anyString(), eq(userQuery), eq(String.class)))
                .thenReturn(Optional.empty());

        String result = responseGenerationService.generateResponse(userQuery, chunkedEntries, userQueryPrompt);

        assertEquals("No response generated by the service.", result);
        verify(mockChatService).callModel(anyString(), eq(userQuery), eq(String.class));
    }

    @Test
    void generateResponse_ReturnsErrorMessage_WhenChatServiceThrowsException() {
        String userQuery = "What is the legal implication?";
        String userQueryPrompt = "Provide detailed legal advice.";
        List<ChunkedEntry> chunkedEntries = List.of(
                new ChunkedEntry("id1", "Chunk 1", "file name 1", 1, "doc id")
        );

        when(mockChatService.callModel(anyString(), eq(userQuery), eq(String.class)))
                .thenThrow(new RuntimeException("Service error"));

        String result = responseGenerationService.generateResponse(userQuery, chunkedEntries, userQueryPrompt);

        assertEquals("An error occurred while generating the response.", result);
        verify(mockChatService).callModel(anyString(), eq(userQuery), eq(String.class));
    }

    @Test
    void generateResponse_ReturnsDefaultContextMessage_WhenChunkedEntriesAreNullOrEmpty() {
        String userQuery = "What is the legal implication?";
        String userQueryPrompt = "Provide detailed legal advice.";

        when(mockChatService.callModel(anyString(), eq(userQuery), eq(String.class)))
                .thenReturn(Optional.of("Valid AI Response"));

        String resultWithNullEntries = responseGenerationService.generateResponse(userQuery, null, userQueryPrompt);
        assertEquals("Valid AI Response", resultWithNullEntries);
        verify(mockChatService).callModel(anyString(), eq(userQuery), eq(String.class));

        String resultWithEmptyEntries = responseGenerationService.generateResponse(userQuery, List.of(), userQueryPrompt);
        assertEquals("Valid AI Response", resultWithEmptyEntries);
        verify(mockChatService, times(2)).callModel(anyString(), eq(userQuery), eq(String.class));
    }
}
