package uk.gov.moj.cp.retrieval.service;

import static uk.gov.moj.cp.ai.util.StringUtil.isNullOrEmpty;

import uk.gov.moj.cp.ai.model.ChunkedEntry;
import uk.gov.moj.cp.ai.service.ChatService;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ResponseGenerationService {

    private static final Logger LOGGER = LoggerFactory.getLogger(ResponseGenerationService.class);

    private static final String SYSTEM_PROMPT_TEMPLATE = """
            You are an expert Legal Advisor.
            Who goes through the complete case document before responding and responds with every single detail to answer user's query.
            Understand any kind of user query and respond accordingly\
            Respond purely based on the provided legal document:\s
             \
            **Retrieved Documents:**
            %s\
            
            **CRITICAL CITATION FORMAT:** Every source citation MUST start with:  Example: (Source: Possess Blade IDPC.pdf, Pages 10-12,14,20|10,11,12,14,20|idpcId=2876)
            **Instructions:**
            1.  **Strictly adhere to the provided documents:** Answer the user's query *only* using information found within the {Retrieved Documents}\
            2.  **No external knowledge or opinions:** Do NOT add any information, analysis, or opinions that are not directly supported by the provided text. Do not use your own Knowledge.
            3.  **Provide Source for all factual statements:** For every factual statement you make you should include the citation and Every source citation MUST start with:  Example: (Source: [DOCUMENT_FILENAME], Pages [PAGE_NUMBER]|[individual page numbers]|documentId=[DOCUMENT_ID])
            ,
            4.  **CRITICAL HEADING HIERARCHY:** For accessibility compliance (DAC/NFT level), you MUST follow proper heading structure:
                - NEVER use h1 (#) headings in your response as the page already has an h1
                - Use h2 (##) for main question titles and section headings
                - Use h3 (###) for subheadings
                - Use h4 (####) for sub-subheadings, and so on in descending order
                - This is mandatory for accessibility compliance
            Provide the answer in a well written professional format.
            At the end of response, do not ask user for a follow up query.
            
            Additional context: %s""";

    private final ChatService chatService;

    public ResponseGenerationService() {
        String endpoint = System.getenv("AZURE_OPENAI_ENDPOINT");
        String apiKey = System.getenv("AZURE_OPENAI_API_KEY");
        String deploymentName = System.getenv("AZURE_OPENAI_CHAT_DEPLOYMENT_NAME");

        chatService = new ChatService(endpoint, apiKey, deploymentName);
    }

    public ResponseGenerationService(ChatService chatService) {
        this.chatService = chatService;
    }

    public String generateResponse(final String userQuery, final List<ChunkedEntry> chunkedEntries, final String userQueryPrompt) {
        LOGGER.info("Generating LLM response for query: {}", userQuery);

        String retrievedContextsString = buildContextString(chunkedEntries);
        String systemPromptContent = String.format(SYSTEM_PROMPT_TEMPLATE, retrievedContextsString,
                userQueryPrompt != null ? userQueryPrompt : "");

        try {
            return chatService.callModel(systemPromptContent, userQuery, String.class)
                    .filter(response -> !isNullOrEmpty(response))
                    .map(response -> {
                        final String trimmedResponse = response.trim();
                        LOGGER.info("LLM Raw Response: \n{}", trimmedResponse);
                        return trimmedResponse;
                    })
                    .orElseGet(() -> {
                        LOGGER.warn("LLM returned no response.");
                        return "No response generated by the service.";
                    });
        } catch (Exception e) {
            LOGGER.error("Error generating response for user query: {}", userQuery, e);
            return "An error occurred while generating the response.";
        }
    }

    private String buildContextString(final List<ChunkedEntry> chunkedEntries) {
        if (chunkedEntries == null || chunkedEntries.isEmpty()) {
            return "No relevant documents were retrieved for this query";
        }

        StringBuilder contextBuilder = new StringBuilder();
        for (ChunkedEntry entry : chunkedEntries) {
            contextBuilder.append("DOCUMENT_ID: ").append(entry.documentId())
                    .append(", DOCUMENT_FILENAME: ").append(entry.documentFileName());
            if (entry.pageNumber() != null) {
                contextBuilder.append(", PAGE_NUMBER: ").append(entry.pageNumber());
            }
            contextBuilder.append("\nDOCUMENT_CONTENT: ").append(entry.chunk()).append("\n\n");
        }
        return contextBuilder.toString();
    }

}